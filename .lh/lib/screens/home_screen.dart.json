{
    "sourceFile": "lib/screens/home_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1728144925364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728145305002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,148 @@\n+import 'package:flutter/material.dart';\r\n+import '../models/folder.dart';\r\n+import '../models/book.dart';\r\n+import '../widgets/folder_tree.dart';\r\n+import '../widgets/book_grid.dart';\r\n+import '../services/book_service.dart';\r\n+import '../services/database_helper.dart';\r\n+import 'reader_screen.dart';\r\n+\r\n+class HomeScreen extends StatefulWidget {\r\n+  @override\r\n+  _HomeScreenState createState() => _HomeScreenState();\r\n+}\r\n+\r\n+class _HomeScreenState extends State<HomeScreen> {\r\n+  late Folder rootFolder;\r\n+  late BookService bookService;\r\n+  Folder? selectedFolder;\r\n+  String searchQuery = '';\r\n+  bool isLoading = true;\r\n+  Book? draggedBook;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    rootFolder = Folder(id: 'root', name: 'My Library');\r\n+    bookService = BookService();\r\n+    selectedFolder = rootFolder;\r\n+    _loadLibrary();\r\n+  }\r\n+\r\n+  Future<void> _loadLibrary() async {\r\n+    setState(() {\r\n+      isLoading = true;\r\n+    });\r\n+\r\n+    final dbHelper = DatabaseHelper.instance;\r\n+    final folders = await dbHelper.getFolders();\r\n+\r\n+    // Reconstruct folder hierarchy\r\n+    final Map<String, Folder> folderMap = {rootFolder.id: rootFolder};\r\n+    for (final folder in folders) {\r\n+      folderMap[folder.id] = folder;\r\n+    }\r\n+\r\n+    for (final folder in folders) {\r\n+      final parentId = folder.parent?.id;\r\n+      if (parentId != null && folderMap.containsKey(parentId)) {\r\n+        folderMap[parentId]!.addSubfolder(folder);\r\n+      } else {\r\n+        rootFolder.addSubfolder(folder);\r\n+      }\r\n+    }\r\n+\r\n+    // Load books for each folder\r\n+    for (final folder in folderMap.values) {\r\n+      final books = await bookService.loadBooksInFolder(folder);\r\n+      folder.books = books;\r\n+    }\r\n+\r\n+    setState(() {\r\n+      isLoading = false;\r\n+    });\r\n+  }\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Scaffold(\r\n+      appBar: AppBar(\r\n+        title: Text('Book Library'),\r\n+        actions: [\r\n+          IconButton(\r\n+            icon: Icon(Icons.add),\r\n+            onPressed: _importBook,\r\n+          ),\r\n+        ],\r\n+      ),\r\n+      body: isLoading\r\n+          ? Center(child: CircularProgressIndicator())\r\n+          : Row(\r\n+              children: [\r\n+                Container(\r\n+                  width: 250,\r\n+                  child: FolderTree(\r\n+                    rootFolder: rootFolder,\r\n+                    onFolderSelected: (folder) {\r\n+                      setState(() {\r\n+                        selectedFolder = folder;\r\n+                      });\r\n+                    },\r\n+                  ),\r\n+                ),\r\n+                VerticalDivider(thickness: 1, width: 1),\r\n+                Expanded(\r\n+                  child: Column(\r\n+                    children: [\r\n+                      Padding(\r\n+                        padding: const EdgeInsets.all(8.0),\r\n+                        child: TextField(\r\n+                          decoration: InputDecoration(\r\n+                            hintText: 'Search books...',\r\n+                            prefixIcon: Icon(Icons.search),\r\n+                          ),\r\n+                          onChanged: (value) {\r\n+                            setState(() {\r\n+                              searchQuery = value;\r\n+                            });\r\n+                          },\r\n+                        ),\r\n+                      ),\r\n+                      Expanded(\r\n+                        child: BookGrid(\r\n+                          books: _getFilteredBooks(),\r\n+                          onBookTap: _openBook,\r\n+                        ),\r\n+                      ),\r\n+                    ],\r\n+                  ),\r\n+                ),\r\n+              ],\r\n+            ),\r\n+    );\r\n+  }\r\n+\r\n+  List<Book> _getFilteredBooks() {\r\n+    if (searchQuery.isEmpty) {\r\n+      return selectedFolder?.books ?? [];\r\n+    } else {\r\n+      return bookService.searchBooks(selectedFolder?.books ?? [], searchQuery);\r\n+    }\r\n+  }\r\n+\r\n+  void _importBook() async {\r\n+    // Implement file picking logic here\r\n+    // For now, let's assume we have a PDF file\r\n+    // final File pdfFile = ... // Get the PDF file\r\n+\r\n+    // Book newBook = await bookService.importBook(pdfFile, selectedFolder!);\r\n+    // setState(() {}); // Refresh the UI\r\n+  }\r\n+\r\n+  void _openBook(Book book) {\r\n+    Navigator.push(\r\n+      context,\r\n+      MaterialPageRoute(builder: (context) => ReaderScreen(book: book)),\r\n+    );\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728145323854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,8 +87,11 @@\n                       setState(() {\r\n                         selectedFolder = folder;\r\n                       });\r\n                     },\r\n+                    onBookDropped: (book, folder) {\r\n+                      _moveBook(book, folder);\r\n+                    },\r\n                   ),\r\n                 ),\r\n                 VerticalDivider(thickness: 1, width: 1),\r\n                 Expanded(\r\n@@ -111,8 +114,18 @@\n                       Expanded(\r\n                         child: BookGrid(\r\n                           books: _getFilteredBooks(),\r\n                           onBookTap: _openBook,\r\n+                          onDragStarted: (book, offset) {\r\n+                            setState(() {\r\n+                              draggedBook = book;\r\n+                            });\r\n+                          },\r\n+                          onDragEnd: (book) {\r\n+                            setState(() {\r\n+                              draggedBook = null;\r\n+                            });\r\n+                          },\r\n                         ),\r\n                       ),\r\n                     ],\r\n                   ),\r\n@@ -121,155 +134,18 @@\n             ),\r\n     );\r\n   }\r\n \r\n-  List<Book> _getFilteredBooks() {\r\n-    if (searchQuery.isEmpty) {\r\n-      return selectedFolder?.books ?? [];\r\n-    } else {\r\n-      return bookService.searchBooks(selectedFolder?.books ?? [], searchQuery);\r\n+  void _moveBook(Book book, Folder targetFolder) async {\r\n+    if (selectedFolder != null && selectedFolder != targetFolder) {\r\n+      await bookService.moveBook(book, selectedFolder!, targetFolder);\r\n+      setState(() {\r\n+        // Refresh the UI\r\n+      });\r\n     }\r\n   }\r\n \r\n-  void _importBook() async {\r\n-    // Implement file picking logic here\r\n-    // For now, let's assume we have a PDF file\r\n-    // final File pdfFile = ... // Get the PDF file\r\n \r\n-    // Book newBook = await bookService.importBook(pdfFile, selectedFolder!);\r\n-    // setState(() {}); // Refresh the UI\r\n-  }\r\n-\r\n-  void _openBook(Book book) {\r\n-    Navigator.push(\r\n-      context,\r\n-      MaterialPageRoute(builder: (context) => ReaderScreen(book: book)),\r\n-    );\r\n-  }\r\n-}\n-import 'package:flutter/material.dart';\r\n-import '../models/folder.dart';\r\n-import '../models/book.dart';\r\n-import '../widgets/folder_tree.dart';\r\n-import '../widgets/book_grid.dart';\r\n-import '../services/book_service.dart';\r\n-import '../services/database_helper.dart';\r\n-import 'reader_screen.dart';\r\n-\r\n-class HomeScreen extends StatefulWidget {\r\n-  @override\r\n-  _HomeScreenState createState() => _HomeScreenState();\r\n-}\r\n-\r\n-class _HomeScreenState extends State<HomeScreen> {\r\n-  late Folder rootFolder;\r\n-  late BookService bookService;\r\n-  Folder? selectedFolder;\r\n-  String searchQuery = '';\r\n-  bool isLoading = true;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    rootFolder = Folder(id: 'root', name: 'My Library');\r\n-    bookService = BookService();\r\n-    selectedFolder = rootFolder;\r\n-    _loadLibrary();\r\n-  }\r\n-\r\n-  Future<void> _loadLibrary() async {\r\n-    setState(() {\r\n-      isLoading = true;\r\n-    });\r\n-\r\n-    final dbHelper = DatabaseHelper.instance;\r\n-    final folders = await dbHelper.getFolders();\r\n-\r\n-    // Reconstruct folder hierarchy\r\n-    final Map<String, Folder> folderMap = {rootFolder.id: rootFolder};\r\n-    for (final folder in folders) {\r\n-      folderMap[folder.id] = folder;\r\n-    }\r\n-\r\n-    for (final folder in folders) {\r\n-      final parentId = folder.parent?.id;\r\n-      if (parentId != null && folderMap.containsKey(parentId)) {\r\n-        folderMap[parentId]!.addSubfolder(folder);\r\n-      } else {\r\n-        rootFolder.addSubfolder(folder);\r\n-      }\r\n-    }\r\n-\r\n-    // Load books for each folder\r\n-    for (final folder in folderMap.values) {\r\n-      final books = await bookService.loadBooksInFolder(folder);\r\n-      folder.books = books;\r\n-    }\r\n-\r\n-    setState(() {\r\n-      isLoading = false;\r\n-    });\r\n-  }\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return Scaffold(\r\n-      appBar: AppBar(\r\n-        title: Text('Book Library'),\r\n-        actions: [\r\n-          IconButton(\r\n-            icon: Icon(Icons.add),\r\n-            onPressed: _importBook,\r\n-          ),\r\n-        ],\r\n-      ),\r\n-      body: isLoading\r\n-          ? Center(child: CircularProgressIndicator())\r\n-          : Row(\r\n-              children: [\r\n-                Container(\r\n-                  width: 250,\r\n-                  child: FolderTree(\r\n-                    rootFolder: rootFolder,\r\n-                    onFolderSelected: (folder) {\r\n-                      setState(() {\r\n-                        selectedFolder = folder;\r\n-                      });\r\n-                    },\r\n-                  ),\r\n-                ),\r\n-                VerticalDivider(thickness: 1, width: 1),\r\n-                Expanded(\r\n-                  child: Column(\r\n-                    children: [\r\n-                      Padding(\r\n-                        padding: const EdgeInsets.all(8.0),\r\n-                        child: TextField(\r\n-                          decoration: InputDecoration(\r\n-                            hintText: 'Search books...',\r\n-                            prefixIcon: Icon(Icons.search),\r\n-                          ),\r\n-                          onChanged: (value) {\r\n-                            setState(() {\r\n-                              searchQuery = value;\r\n-                            });\r\n-                          },\r\n-                        ),\r\n-                      ),\r\n-                      Expanded(\r\n-                        child: BookGrid(\r\n-                          books: _getFilteredBooks(),\r\n-                          onBookTap: _openBook,\r\n-                        ),\r\n-                      ),\r\n-                    ],\r\n-                  ),\r\n-                ),\r\n-              ],\r\n-            ),\r\n-    );\r\n-  }\r\n-\r\n   List<Book> _getFilteredBooks() {\r\n     if (searchQuery.isEmpty) {\r\n       return selectedFolder?.books ?? [];\r\n     } else {\r\n"
                },
                {
                    "date": 1728145792585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,14 +153,23 @@\n     }\r\n   }\r\n \r\n   void _importBook() async {\r\n-    // Implement file picking logic here\r\n-    // For now, let's assume we have a PDF file\r\n-    // final File pdfFile = ... // Get the PDF file\r\n-\r\n-    // Book newBook = await bookService.importBook(pdfFile, selectedFolder!);\r\n-    // setState(() {}); // Refresh the UI\r\n+    if (selectedFolder != null) {\r\n+      final Book? importedBook = await bookService.importBook(selectedFolder!);\r\n+      if (importedBook != null) {\r\n+        setState(() {\r\n+          // Refresh the UI\r\n+        });\r\n+        ScaffoldMessenger.of(context).showSnackBar(\r\n+          SnackBar(content: Text('Book \"${importedBook.title}\" imported successfully')),\r\n+        );\r\n+      }\r\n+    } else {\r\n+      ScaffoldMessenger.of(context).showSnackBar(\r\n+        SnackBar(content: Text('Please select a folder to import the book')),\r\n+      );\r\n+    }\r\n   }\r\n \r\n   void _openBook(Book book) {\r\n     Navigator.push(\r\n"
                },
                {
                    "date": 1728145815951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     bookService = BookService();\r\n     selectedFolder = rootFolder;\r\n     _loadLibrary();\r\n   }\r\n-\r\n+  \r\n   Future<void> _loadLibrary() async {\r\n     setState(() {\r\n       isLoading = true;\r\n     });\r\n"
                },
                {
                    "date": 1728166919386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,19 +3,21 @@\n import '../models/book.dart';\r\n import '../widgets/folder_tree.dart';\r\n import '../widgets/book_grid.dart';\r\n import '../services/book_service.dart';\r\n-import '../services/database_helper.dart';\r\n import 'reader_screen.dart';\r\n \r\n class HomeScreen extends StatefulWidget {\r\n+  final BookService bookService;\r\n+\r\n+  const HomeScreen({Key? key, required this.bookService}) : super(key: key);\r\n+\r\n   @override\r\n   _HomeScreenState createState() => _HomeScreenState();\r\n }\r\n \r\n class _HomeScreenState extends State<HomeScreen> {\r\n   late Folder rootFolder;\r\n-  late BookService bookService;\r\n   Folder? selectedFolder;\r\n   String searchQuery = '';\r\n   bool isLoading = true;\r\n   Book? draggedBook;\r\n@@ -23,9 +25,8 @@\n   @override\r\n   void initState() {\r\n     super.initState();\r\n     rootFolder = Folder(id: 'root', name: 'My Library');\r\n-    bookService = BookService();\r\n     selectedFolder = rootFolder;\r\n     _loadLibrary();\r\n   }\r\n   \r\n@@ -33,10 +34,9 @@\n     setState(() {\r\n       isLoading = true;\r\n     });\r\n \r\n-    final dbHelper = DatabaseHelper.instance;\r\n-    final folders = await dbHelper.getFolders();\r\n+    final folders = await widget.bookService.getFolders();\r\n \r\n     // Reconstruct folder hierarchy\r\n     final Map<String, Folder> folderMap = {rootFolder.id: rootFolder};\r\n     for (final folder in folders) {\r\n@@ -53,9 +53,9 @@\n     }\r\n \r\n     // Load books for each folder\r\n     for (final folder in folderMap.values) {\r\n-      final books = await bookService.loadBooksInFolder(folder);\r\n+      final books = await widget.bookService.loadBooksInFolder(folder);\r\n       folder.books = books;\r\n     }\r\n \r\n     setState(() {\r\n@@ -136,27 +136,26 @@\n   }\r\n \r\n   void _moveBook(Book book, Folder targetFolder) async {\r\n     if (selectedFolder != null && selectedFolder != targetFolder) {\r\n-      await bookService.moveBook(book, selectedFolder!, targetFolder);\r\n+      await widget.bookService.moveBook(book, selectedFolder!, targetFolder);\r\n       setState(() {\r\n         // Refresh the UI\r\n       });\r\n     }\r\n   }\r\n \r\n-\r\n   List<Book> _getFilteredBooks() {\r\n     if (searchQuery.isEmpty) {\r\n       return selectedFolder?.books ?? [];\r\n     } else {\r\n-      return bookService.searchBooks(selectedFolder?.books ?? [], searchQuery);\r\n+      return widget.bookService.searchBooks(selectedFolder?.books ?? [], searchQuery);\r\n     }\r\n   }\r\n \r\n   void _importBook() async {\r\n     if (selectedFolder != null) {\r\n-      final Book? importedBook = await bookService.importBook(selectedFolder!);\r\n+      final Book? importedBook = await widget.bookService.importBook(selectedFolder!);\r\n       if (importedBook != null) {\r\n         setState(() {\r\n           // Refresh the UI\r\n         });\r\n@@ -173,8 +172,10 @@\n \r\n   void _openBook(Book book) {\r\n     Navigator.push(\r\n       context,\r\n-      MaterialPageRoute(builder: (context) => ReaderScreen(book: book)),\r\n+      MaterialPageRoute(\r\n+        builder: (context) => ReaderScreen(book: book, bookService: widget.bookService),\r\n+      ),\r\n     );\r\n   }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728167618147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,23 +14,39 @@\n   @override\r\n   _HomeScreenState createState() => _HomeScreenState();\r\n }\r\n \r\n-class _HomeScreenState extends State<HomeScreen> {\r\n+class _HomeScreenState extends State<HomeScreen> with SingleTickerProviderStateMixin {\r\n   late Folder rootFolder;\r\n   Folder? selectedFolder;\r\n   String searchQuery = '';\r\n   bool isLoading = true;\r\n   Book? draggedBook;\r\n+  late AnimationController _controller;\r\n+  late Animation<double> _animation;\r\n \r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n     rootFolder = Folder(id: 'root', name: 'My Library');\r\n     selectedFolder = rootFolder;\r\n+    _controller = AnimationController(\r\n+      duration: const Duration(milliseconds: 1000),\r\n+      vsync: this,\r\n+    );\r\n+    _animation = CurvedAnimation(\r\n+      parent: _controller,\r\n+      curve: Curves.easeInOut,\r\n+    );\r\n     _loadLibrary();\r\n   }\r\n-  \r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    _controller.dispose();\r\n+    super.dispose();\r\n+  }\r\n+\r\n   Future<void> _loadLibrary() async {\r\n     setState(() {\r\n       isLoading = true;\r\n     });\r\n@@ -60,78 +76,95 @@\n \r\n     setState(() {\r\n       isLoading = false;\r\n     });\r\n+    _controller.forward();\r\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n-        title: Text('Book Library'),\r\n+        title: Text('Claude\\'s Book Library', style: Theme.of(context).textTheme.headline6),\r\n         actions: [\r\n           IconButton(\r\n             icon: Icon(Icons.add),\r\n             onPressed: _importBook,\r\n           ),\r\n         ],\r\n       ),\r\n       body: isLoading\r\n-          ? Center(child: CircularProgressIndicator())\r\n-          : Row(\r\n-              children: [\r\n-                Container(\r\n-                  width: 250,\r\n-                  child: FolderTree(\r\n-                    rootFolder: rootFolder,\r\n-                    onFolderSelected: (folder) {\r\n-                      setState(() {\r\n-                        selectedFolder = folder;\r\n-                      });\r\n-                    },\r\n-                    onBookDropped: (book, folder) {\r\n-                      _moveBook(book, folder);\r\n-                    },\r\n+          ? Center(child: CircularProgressIndicator(\r\n+              valueColor: AlwaysStoppedAnimation<Color>(Theme.of(context).primaryColor),\r\n+            ))\r\n+          : FadeTransition(\r\n+              opacity: _animation,\r\n+              child: Row(\r\n+                children: [\r\n+                  Container(\r\n+                    width: 250,\r\n+                    child: Card(\r\n+                      margin: EdgeInsets.all(8),\r\n+                      child: FolderTree(\r\n+                        rootFolder: rootFolder,\r\n+                        onFolderSelected: (folder) {\r\n+                          setState(() {\r\n+                            selectedFolder = folder;\r\n+                          });\r\n+                        },\r\n+                        onBookDropped: (book, folder) {\r\n+                          _moveBook(book, folder);\r\n+                        },\r\n+                      ),\r\n+                    ),\r\n                   ),\r\n-                ),\r\n-                VerticalDivider(thickness: 1, width: 1),\r\n-                Expanded(\r\n-                  child: Column(\r\n-                    children: [\r\n-                      Padding(\r\n-                        padding: const EdgeInsets.all(8.0),\r\n-                        child: TextField(\r\n-                          decoration: InputDecoration(\r\n-                            hintText: 'Search books...',\r\n-                            prefixIcon: Icon(Icons.search),\r\n+                  VerticalDivider(thickness: 1, width: 1),\r\n+                  Expanded(\r\n+                    child: Column(\r\n+                      children: [\r\n+                        Padding(\r\n+                          padding: const EdgeInsets.all(16.0),\r\n+                          child: TextField(\r\n+                            decoration: InputDecoration(\r\n+                              hintText: 'Search books...',\r\n+                              prefixIcon: Icon(Icons.search, color: Theme.of(context).primaryColor),\r\n+                              border: OutlineInputBorder(\r\n+                                borderRadius: BorderRadius.circular(30),\r\n+                                borderSide: BorderSide.none,\r\n+                              ),\r\n+                              filled: true,\r\n+                              fillColor: Colors.grey[200],\r\n+                            ),\r\n+                            onChanged: (value) {\r\n+                              setState(() {\r\n+                                searchQuery = value;\r\n+                              });\r\n+                            },\r\n                           ),\r\n-                          onChanged: (value) {\r\n-                            setState(() {\r\n-                              searchQuery = value;\r\n-                            });\r\n-                          },\r\n                         ),\r\n-                      ),\r\n-                      Expanded(\r\n-                        child: BookGrid(\r\n-                          books: _getFilteredBooks(),\r\n-                          onBookTap: _openBook,\r\n-                          onDragStarted: (book, offset) {\r\n-                            setState(() {\r\n-                              draggedBook = book;\r\n-                            });\r\n-                          },\r\n-                          onDragEnd: (book) {\r\n-                            setState(() {\r\n-                              draggedBook = null;\r\n-                            });\r\n-                          },\r\n+                        Expanded(\r\n+                          child: AnimationLimiter(\r\n+                            child: BookGrid(\r\n+                              books: _getFilteredBooks(),\r\n+                              onBookTap: _openBook,\r\n+                              onDragStarted: (book, offset) {\r\n+                                setState(() {\r\n+                                  draggedBook = book;\r\n+                                });\r\n+                              },\r\n+                              onDragEnd: (book) {\r\n+                                setState(() {\r\n+                                  draggedBook = null;\r\n+                                });\r\n+                              },\r\n+                            ),\r\n+                          ),\r\n                         ),\r\n-                      ),\r\n-                    ],\r\n+                      ],\r\n+                    ),\r\n                   ),\r\n-                ),\r\n-              ],\r\n+                ],\r\n+              ),\r\n             ),\r\n     );\r\n   }\r\n \r\n"
                },
                {
                    "date": 1728167638384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import 'package:flutter/material.dart';\r\n+import 'package:flutter_staggered_animations/flutter_staggered_animations.dart';\r\n import '../models/folder.dart';\r\n import '../models/book.dart';\r\n import '../widgets/folder_tree.dart';\r\n import '../widgets/book_grid.dart';\r\n@@ -83,9 +84,9 @@\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n-        title: Text('Claude\\'s Book Library', style: Theme.of(context).textTheme.headline6),\r\n+        title: Text('Claude\\'s Book Library', style: Theme.of(context).textTheme.titleLarge),\r\n         actions: [\r\n           IconButton(\r\n             icon: Icon(Icons.add),\r\n             onPressed: _importBook,\r\n"
                }
            ],
            "date": 1728144925364,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport '../models/folder.dart';\r\nimport '../models/book.dart';\r\nimport '../widgets/folder_tree.dart';\r\nimport '../widgets/book_grid.dart';\r\nimport '../services/book_service.dart';\r\nimport '../services/database_helper.dart';\r\nimport 'reader_screen.dart';\r\n\r\nclass HomeScreen extends StatefulWidget {\r\n  @override\r\n  _HomeScreenState createState() => _HomeScreenState();\r\n}\r\n\r\nclass _HomeScreenState extends State<HomeScreen> {\r\n  late Folder rootFolder;\r\n  late BookService bookService;\r\n  Folder? selectedFolder;\r\n  String searchQuery = '';\r\n  bool isLoading = true;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    rootFolder = Folder(id: 'root', name: 'My Library');\r\n    bookService = BookService();\r\n    selectedFolder = rootFolder;\r\n    _loadLibrary();\r\n  }\r\n\r\n  Future<void> _loadLibrary() async {\r\n    setState(() {\r\n      isLoading = true;\r\n    });\r\n\r\n    final dbHelper = DatabaseHelper.instance;\r\n    final folders = await dbHelper.getFolders();\r\n\r\n    // Reconstruct folder hierarchy\r\n    final Map<String, Folder> folderMap = {rootFolder.id: rootFolder};\r\n    for (final folder in folders) {\r\n      folderMap[folder.id] = folder;\r\n    }\r\n\r\n    for (final folder in folders) {\r\n      final parentId = folder.parent?.id;\r\n      if (parentId != null && folderMap.containsKey(parentId)) {\r\n        folderMap[parentId]!.addSubfolder(folder);\r\n      } else {\r\n        rootFolder.addSubfolder(folder);\r\n      }\r\n    }\r\n\r\n    // Load books for each folder\r\n    for (final folder in folderMap.values) {\r\n      final books = await bookService.loadBooksInFolder(folder);\r\n      folder.books = books;\r\n    }\r\n\r\n    setState(() {\r\n      isLoading = false;\r\n    });\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('Book Library'),\r\n        actions: [\r\n          IconButton(\r\n            icon: Icon(Icons.add),\r\n            onPressed: _importBook,\r\n          ),\r\n        ],\r\n      ),\r\n      body: isLoading\r\n          ? Center(child: CircularProgressIndicator())\r\n          : Row(\r\n              children: [\r\n                Container(\r\n                  width: 250,\r\n                  child: FolderTree(\r\n                    rootFolder: rootFolder,\r\n                    onFolderSelected: (folder) {\r\n                      setState(() {\r\n                        selectedFolder = folder;\r\n                      });\r\n                    },\r\n                  ),\r\n                ),\r\n                VerticalDivider(thickness: 1, width: 1),\r\n                Expanded(\r\n                  child: Column(\r\n                    children: [\r\n                      Padding(\r\n                        padding: const EdgeInsets.all(8.0),\r\n                        child: TextField(\r\n                          decoration: InputDecoration(\r\n                            hintText: 'Search books...',\r\n                            prefixIcon: Icon(Icons.search),\r\n                          ),\r\n                          onChanged: (value) {\r\n                            setState(() {\r\n                              searchQuery = value;\r\n                            });\r\n                          },\r\n                        ),\r\n                      ),\r\n                      Expanded(\r\n                        child: BookGrid(\r\n                          books: _getFilteredBooks(),\r\n                          onBookTap: _openBook,\r\n                        ),\r\n                      ),\r\n                    ],\r\n                  ),\r\n                ),\r\n              ],\r\n            ),\r\n    );\r\n  }\r\n\r\n  List<Book> _getFilteredBooks() {\r\n    if (searchQuery.isEmpty) {\r\n      return selectedFolder?.books ?? [];\r\n    } else {\r\n      return bookService.searchBooks(selectedFolder?.books ?? [], searchQuery);\r\n    }\r\n  }\r\n\r\n  void _importBook() async {\r\n    // Implement file picking logic here\r\n    // For now, let's assume we have a PDF file\r\n    // final File pdfFile = ... // Get the PDF file\r\n\r\n    // Book newBook = await bookService.importBook(pdfFile, selectedFolder!);\r\n    // setState(() {}); // Refresh the UI\r\n  }\r\n\r\n  void _openBook(Book book) {\r\n    Navigator.push(\r\n      context,\r\n      MaterialPageRoute(builder: (context) => ReaderScreen(book: book)),\r\n    );\r\n  }\r\n}"
        }
    ]
}