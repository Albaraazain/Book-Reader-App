{
    "sourceFile": "lib/screens/reader_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1728119109484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728119194803,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,39 @@\n-// TODO Implement this library.\n\\ No newline at end of file\n+import 'package:flutter/material.dart';\r\n+import '../models/book.dart';\r\n+\r\n+class ReaderScreen extends StatelessWidget {\r\n+  final Book book;\r\n+\r\n+  ReaderScreen({required this.book});\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return Container(\r\n+      padding: EdgeInsets.all(16.0),\r\n+      color: Colors.white,\r\n+      child: Column(\r\n+        crossAxisAlignment: CrossAxisAlignment.start,\r\n+        children: [\r\n+          Text(\r\n+            book.title,\r\n+            style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold),\r\n+          ),\r\n+          SizedBox(height: 8),\r\n+          Text(\r\n+            'by ${book.author}',\r\n+            style: TextStyle(fontSize: 18, color: Colors.grey[700]),\r\n+          ),\r\n+          SizedBox(height: 16),\r\n+          Expanded(\r\n+            child: SingleChildScrollView(\r\n+              child: Text(\r\n+                'Content of ${book.title} goes here...',\r\n+                style: TextStyle(fontSize: 16),\r\n+              ),\r\n+            ),\r\n+          ),\r\n+        ],\r\n+      ),\r\n+    );\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1728119303091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,38 +1,85 @@\n+// lib/screens/reader_screen.dart\r\n+\r\n import 'package:flutter/material.dart';\r\n import '../models/book.dart';\r\n \r\n-class ReaderScreen extends StatelessWidget {\r\n+class ReaderScreen extends StatefulWidget {\r\n   final Book book;\r\n \r\n   ReaderScreen({required this.book});\r\n \r\n   @override\r\n+  _ReaderScreenState createState() => _ReaderScreenState();\r\n+}\r\n+\r\n+class _ReaderScreenState extends State<ReaderScreen> {\r\n+  int currentPage = 0;\r\n+\r\n+  @override\r\n+  void initState() {\r\n+    super.initState();\r\n+    currentPage = widget.book.currentPage;\r\n+  }\r\n+\r\n+  void onPageChange(int newPage) {\r\n+    setState(() {\r\n+      currentPage = newPage;\r\n+    });\r\n+  }\r\n+\r\n+  @override\r\n+  void dispose() {\r\n+    // Save the current page when leaving the screen\r\n+    widget.book.currentPage = currentPage;\r\n+    super.dispose();\r\n+  }\r\n+\r\n+  @override\r\n   Widget build(BuildContext context) {\r\n-    return Container(\r\n-      padding: EdgeInsets.all(16.0),\r\n-      color: Colors.white,\r\n-      child: Column(\r\n-        crossAxisAlignment: CrossAxisAlignment.start,\r\n+    // You would replace this with actual content rendering logic\r\n+    return Scaffold(\r\n+      appBar: AppBar(\r\n+        title: Text('Reading: ${widget.book.title}'),\r\n+        automaticallyImplyLeading: false, // Remove back button\r\n+      ),\r\n+      body: Column(\r\n         children: [\r\n-          Text(\r\n-            book.title,\r\n-            style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold),\r\n-          ),\r\n-          SizedBox(height: 8),\r\n-          Text(\r\n-            'by ${book.author}',\r\n-            style: TextStyle(fontSize: 18, color: Colors.grey[700]),\r\n-          ),\r\n-          SizedBox(height: 16),\r\n           Expanded(\r\n             child: SingleChildScrollView(\r\n+              padding: EdgeInsets.all(16.0),\r\n               child: Text(\r\n-                'Content of ${book.title} goes here...',\r\n+                'Content of \"${widget.book.title}\" at page $currentPage goes here...',\r\n                 style: TextStyle(fontSize: 16),\r\n               ),\r\n             ),\r\n           ),\r\n+          Container(\r\n+            color: Colors.grey[300],\r\n+            padding: EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),\r\n+            child: Row(\r\n+              children: [\r\n+                Text('Page $currentPage of ${widget.book.totalPages}'),\r\n+                Spacer(),\r\n+                IconButton(\r\n+                  icon: Icon(Icons.arrow_back),\r\n+                  onPressed: currentPage > 1\r\n+                      ? () {\r\n+                          onPageChange(currentPage - 1);\r\n+                        }\r\n+                      : null,\r\n+                ),\r\n+                IconButton(\r\n+                  icon: Icon(Icons.arrow_forward),\r\n+                  onPressed: currentPage < widget.book.totalPages\r\n+                      ? () {\r\n+                          onPageChange(currentPage + 1);\r\n+                        }\r\n+                      : null,\r\n+                ),\r\n+              ],\r\n+            ),\r\n+          ),\r\n         ],\r\n       ),\r\n     );\r\n   }\r\n"
                },
                {
                    "date": 1728119646764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,11 @@\n // lib/screens/reader_screen.dart\r\n \r\n import 'package:flutter/material.dart';\r\n import '../models/book.dart';\r\n+import 'package:flutter_pdfview/flutter_pdfview.dart';\r\n+import 'package:epub_view/epub_view.dart';\r\n+import 'dart:io';\r\n \r\n class ReaderScreen extends StatefulWidget {\r\n   final Book book;\r\n \r\n@@ -13,74 +16,85 @@\n }\r\n \r\n class _ReaderScreenState extends State<ReaderScreen> {\r\n   int currentPage = 0;\r\n+  late PDFViewController pdfController;\r\n+  late EpubController epubController;\r\n+  bool isPDF = false;\r\n \r\n   @override\r\n   void initState() {\r\n     super.initState();\r\n     currentPage = widget.book.currentPage;\r\n-  }\r\n \r\n-  void onPageChange(int newPage) {\r\n-    setState(() {\r\n-      currentPage = newPage;\r\n-    });\r\n+    String fileExtension = widget.book.filePath.split('.').last.toLowerCase();\r\n+    isPDF = fileExtension == 'pdf';\r\n+\r\n+    if (!isPDF) {\r\n+      epubController = EpubController(\r\n+        document: EpubReader.readBook(File(widget.book.filePath).readAsBytesSync()),\r\n+      );\r\n+    }\r\n   }\r\n \r\n   @override\r\n   void dispose() {\r\n-    // Save the current page when leaving the screen\r\n     widget.book.currentPage = currentPage;\r\n+    widget.book.save();\r\n+    if (!isPDF) {\r\n+      epubController.dispose();\r\n+    }\r\n     super.dispose();\r\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n-    // You would replace this with actual content rendering logic\r\n+    final Color backgroundColor = Color(0xFFFFFFFF); // White background for reader\r\n+\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n-        title: Text('Reading: ${widget.book.title}'),\r\n-        automaticallyImplyLeading: false, // Remove back button\r\n+        title: Text(\r\n+          widget.book.title,\r\n+          style: TextStyle(color: Colors.white),\r\n+        ),\r\n+        automaticallyImplyLeading: false,\r\n       ),\r\n-      body: Column(\r\n-        children: [\r\n-          Expanded(\r\n-            child: SingleChildScrollView(\r\n-              padding: EdgeInsets.all(16.0),\r\n-              child: Text(\r\n-                'Content of \"${widget.book.title}\" at page $currentPage goes here...',\r\n-                style: TextStyle(fontSize: 16),\r\n-              ),\r\n-            ),\r\n-          ),\r\n-          Container(\r\n-            color: Colors.grey[300],\r\n-            padding: EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),\r\n-            child: Row(\r\n-              children: [\r\n-                Text('Page $currentPage of ${widget.book.totalPages}'),\r\n-                Spacer(),\r\n-                IconButton(\r\n-                  icon: Icon(Icons.arrow_back),\r\n-                  onPressed: currentPage > 1\r\n-                      ? () {\r\n-                          onPageChange(currentPage - 1);\r\n-                        }\r\n-                      : null,\r\n-                ),\r\n-                IconButton(\r\n-                  icon: Icon(Icons.arrow_forward),\r\n-                  onPressed: currentPage < widget.book.totalPages\r\n-                      ? () {\r\n-                          onPageChange(currentPage + 1);\r\n-                        }\r\n-                      : null,\r\n-                ),\r\n-              ],\r\n-            ),\r\n-          ),\r\n-        ],\r\n+      body: Container(\r\n+        color: backgroundColor,\r\n+        child: isPDF ? _buildPDFView() : _buildEpubView(),\r\n       ),\r\n     );\r\n   }\r\n+\r\n+  Widget _buildPDFView() {\r\n+    return PDFView(\r\n+      filePath: widget.book.filePath,\r\n+      autoSpacing: false,\r\n+      pageFling: false,\r\n+      defaultPage: currentPage,\r\n+      enableSwipe: true,\r\n+      swipeHorizontal: true,\r\n+      onRender: (_pages) {\r\n+        setState(() {\r\n+          widget.book.totalPages = _pages!;\r\n+        });\r\n+      },\r\n+      onViewCreated: (PDFViewController pdfViewController) {\r\n+        pdfController = pdfViewController;\r\n+      },\r\n+      onPageChanged: (int? page, int? total) {\r\n+        setState(() {\r\n+          currentPage = page ?? currentPage;\r\n+        });\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildEpubView() {\r\n+    return EpubView(\r\n+      controller: epubController,\r\n+      onChapterChanged: (value) {\r\n+        // Update current page or chapter\r\n+      },\r\n+    );\r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1728119695627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,8 @@\n \r\n import 'package:flutter/material.dart';\r\n import '../models/book.dart';\r\n import 'package:flutter_pdfview/flutter_pdfview.dart';\r\n-import 'package:epub_view/epub_view.dart';\r\n import 'dart:io';\r\n \r\n class ReaderScreen extends StatefulWidget {\r\n   final Book book;\r\n"
                },
                {
                    "date": 1728145393883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,99 +1,16 @@\n-// lib/screens/reader_screen.dart\r\n-\r\n import 'package:flutter/material.dart';\r\n import '../models/book.dart';\r\n-import 'package:flutter_pdfview/flutter_pdfview.dart';\r\n-import 'dart:io';\r\n+import '../widgets/pdf_reader_widget.dart';\r\n \r\n-class ReaderScreen extends StatefulWidget {\r\n+class ReaderScreen extends StatelessWidget {\r\n   final Book book;\r\n \r\n-  ReaderScreen({required this.book});\r\n+  const ReaderScreen({Key? key, required this.book}) : super(key: key);\r\n \r\n   @override\r\n-  _ReaderScreenState createState() => _ReaderScreenState();\r\n-}\r\n-\r\n-class _ReaderScreenState extends State<ReaderScreen> {\r\n-  int currentPage = 0;\r\n-  late PDFViewController pdfController;\r\n-  late EpubController epubController;\r\n-  bool isPDF = false;\r\n-\r\n-  @override\r\n-  void initState() {\r\n-    super.initState();\r\n-    currentPage = widget.book.currentPage;\r\n-\r\n-    String fileExtension = widget.book.filePath.split('.').last.toLowerCase();\r\n-    isPDF = fileExtension == 'pdf';\r\n-\r\n-    if (!isPDF) {\r\n-      epubController = EpubController(\r\n-        document: EpubReader.readBook(File(widget.book.filePath).readAsBytesSync()),\r\n-      );\r\n-    }\r\n-  }\r\n-\r\n-  @override\r\n-  void dispose() {\r\n-    widget.book.currentPage = currentPage;\r\n-    widget.book.save();\r\n-    if (!isPDF) {\r\n-      epubController.dispose();\r\n-    }\r\n-    super.dispose();\r\n-  }\r\n-\r\n-  @override\r\n   Widget build(BuildContext context) {\r\n-    final Color backgroundColor = Color(0xFFFFFFFF); // White background for reader\r\n-\r\n     return Scaffold(\r\n-      appBar: AppBar(\r\n-        title: Text(\r\n-          widget.book.title,\r\n-          style: TextStyle(color: Colors.white),\r\n-        ),\r\n-        automaticallyImplyLeading: false,\r\n-      ),\r\n-      body: Container(\r\n-        color: backgroundColor,\r\n-        child: isPDF ? _buildPDFView() : _buildEpubView(),\r\n-      ),\r\n+      body: PdfReaderWidget(book: book),\r\n     );\r\n   }\r\n-\r\n-  Widget _buildPDFView() {\r\n-    return PDFView(\r\n-      filePath: widget.book.filePath,\r\n-      autoSpacing: false,\r\n-      pageFling: false,\r\n-      defaultPage: currentPage,\r\n-      enableSwipe: true,\r\n-      swipeHorizontal: true,\r\n-      onRender: (_pages) {\r\n-        setState(() {\r\n-          widget.book.totalPages = _pages!;\r\n-        });\r\n-      },\r\n-      onViewCreated: (PDFViewController pdfViewController) {\r\n-        pdfController = pdfViewController;\r\n-      },\r\n-      onPageChanged: (int? page, int? total) {\r\n-        setState(() {\r\n-          currentPage = page ?? currentPage;\r\n-        });\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildEpubView() {\r\n-    return EpubView(\r\n-      controller: epubController,\r\n-      onChapterChanged: (value) {\r\n-        // Update current page or chapter\r\n-      },\r\n-    );\r\n-  }\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728166697784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,8 @@\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return Scaffold(\r\n-      body: PdfReaderWidget(book: book),\r\n+      body: PdfReaderWidget(book: book, bookService: someBookService),\r\n     );\r\n   }\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1728119109484,
            "name": "Commit-0",
            "content": "// TODO Implement this library."
        }
    ]
}