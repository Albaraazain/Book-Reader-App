{
    "sourceFile": "lib/widgets/folder_tree.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1728144424124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728145208863,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,121 @@\n+import 'package:flutter/material.dart';\r\n+import 'package:provider/provider.dart';\r\n+import '../models/folder.dart';\r\n+\r\n+class FolderTree extends StatelessWidget {\r\n+  final Folder rootFolder;\r\n+\r\n+  const FolderTree({Key? key, required this.rootFolder}) : super(key: key);\r\n+\r\n+  @override\r\n+  Widget build(BuildContext context) {\r\n+    return ChangeNotifierProvider.value(\r\n+      value: rootFolder,\r\n+      child: _buildFolderTree(rootFolder),\r\n+    );\r\n+  }\r\n+\r\n+  Widget _buildFolderTree(Folder folder) {\r\n+    return Consumer<Folder>(\r\n+      builder: (context, folder, child) {\r\n+        return ExpansionTile(\r\n+          title: Text(folder.name),\r\n+          children: [\r\n+            ...folder.subfolders.map((subfolder) => _buildFolderTree(subfolder)),\r\n+            ...folder.books.map((book) => ListTile(title: Text(book.title))),\r\n+          ],\r\n+          trailing: Row(\r\n+            mainAxisSize: MainAxisSize.min,\r\n+            children: [\r\n+              IconButton(\r\n+                icon: Icon(Icons.add),\r\n+                onPressed: () => _showAddDialog(context, folder),\r\n+              ),\r\n+              IconButton(\r\n+                icon: Icon(Icons.edit),\r\n+                onPressed: () => _showRenameDialog(context, folder),\r\n+              ),\r\n+              IconButton(\r\n+                icon: Icon(Icons.delete),\r\n+                onPressed: () => _deleteFolder(context, folder),\r\n+              ),\r\n+            ],\r\n+          ),\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  void _showAddDialog(BuildContext context, Folder parentFolder) {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) {\r\n+        String newFolderName = '';\r\n+        return AlertDialog(\r\n+          title: Text('Add New Folder'),\r\n+          content: TextField(\r\n+            onChanged: (value) => newFolderName = value,\r\n+            decoration: InputDecoration(hintText: 'Folder Name'),\r\n+          ),\r\n+          actions: [\r\n+            TextButton(\r\n+              child: Text('Cancel'),\r\n+              onPressed: () => Navigator.of(context).pop(),\r\n+            ),\r\n+            TextButton(\r\n+              child: Text('Add'),\r\n+              onPressed: () {\r\n+                if (newFolderName.isNotEmpty) {\r\n+                  parentFolder.addSubfolder(Folder(\r\n+                    id: DateTime.now().toString(),\r\n+                    name: newFolderName,\r\n+                  ));\r\n+                  Navigator.of(context).pop();\r\n+                }\r\n+              },\r\n+            ),\r\n+          ],\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  void _showRenameDialog(BuildContext context, Folder folder) {\r\n+    showDialog(\r\n+      context: context,\r\n+      builder: (context) {\r\n+        String newName = folder.name;\r\n+        return AlertDialog(\r\n+          title: Text('Rename Folder'),\r\n+          content: TextField(\r\n+            onChanged: (value) => newName = value,\r\n+            decoration: InputDecoration(hintText: 'New Folder Name'),\r\n+          ),\r\n+          actions: [\r\n+            TextButton(\r\n+              child: Text('Cancel'),\r\n+              onPressed: () => Navigator.of(context).pop(),\r\n+            ),\r\n+            TextButton(\r\n+              child: Text('Rename'),\r\n+              onPressed: () {\r\n+                if (newName.isNotEmpty) {\r\n+                  folder.rename(newName);\r\n+                  Navigator.of(context).pop();\r\n+                }\r\n+              },\r\n+            ),\r\n+          ],\r\n+        );\r\n+      },\r\n+    );\r\n+  }\r\n+\r\n+  void _deleteFolder(BuildContext context, Folder folder) {\r\n+    if (folder.parent != null) {\r\n+      folder.parent!.removeSubfolder(folder);\r\n+    } else {\r\n+      // Handle root folder deletion (if allowed)\r\n+    }\r\n+  }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728145214743,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,126 +117,5 @@\n     } else {\r\n       // Handle root folder deletion (if allowed)\r\n     }\r\n   }\r\n-}\n-import 'package:flutter/material.dart';\r\n-import 'package:provider/provider.dart';\r\n-import '../models/folder.dart';\r\n-\r\n-class FolderTree extends StatelessWidget {\r\n-  final Folder rootFolder;\r\n-\r\n-  const FolderTree({Key? key, required this.rootFolder}) : super(key: key);\r\n-\r\n-  @override\r\n-  Widget build(BuildContext context) {\r\n-    return ChangeNotifierProvider.value(\r\n-      value: rootFolder,\r\n-      child: _buildFolderTree(rootFolder),\r\n-    );\r\n-  }\r\n-\r\n-  Widget _buildFolderTree(Folder folder) {\r\n-    return Consumer<Folder>(\r\n-      builder: (context, folder, child) {\r\n-        return ExpansionTile(\r\n-          title: Text(folder.name),\r\n-          children: [\r\n-            ...folder.subfolders.map((subfolder) => _buildFolderTree(subfolder)),\r\n-            ...folder.books.map((book) => ListTile(title: Text(book.title))),\r\n-          ],\r\n-          trailing: Row(\r\n-            mainAxisSize: MainAxisSize.min,\r\n-            children: [\r\n-              IconButton(\r\n-                icon: Icon(Icons.add),\r\n-                onPressed: () => _showAddDialog(context, folder),\r\n-              ),\r\n-              IconButton(\r\n-                icon: Icon(Icons.edit),\r\n-                onPressed: () => _showRenameDialog(context, folder),\r\n-              ),\r\n-              IconButton(\r\n-                icon: Icon(Icons.delete),\r\n-                onPressed: () => _deleteFolder(context, folder),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  void _showAddDialog(BuildContext context, Folder parentFolder) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (context) {\r\n-        String newFolderName = '';\r\n-        return AlertDialog(\r\n-          title: Text('Add New Folder'),\r\n-          content: TextField(\r\n-            onChanged: (value) => newFolderName = value,\r\n-            decoration: InputDecoration(hintText: 'Folder Name'),\r\n-          ),\r\n-          actions: [\r\n-            TextButton(\r\n-              child: Text('Cancel'),\r\n-              onPressed: () => Navigator.of(context).pop(),\r\n-            ),\r\n-            TextButton(\r\n-              child: Text('Add'),\r\n-              onPressed: () {\r\n-                if (newFolderName.isNotEmpty) {\r\n-                  parentFolder.addSubfolder(Folder(\r\n-                    id: DateTime.now().toString(),\r\n-                    name: newFolderName,\r\n-                  ));\r\n-                  Navigator.of(context).pop();\r\n-                }\r\n-              },\r\n-            ),\r\n-          ],\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  void _showRenameDialog(BuildContext context, Folder folder) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (context) {\r\n-        String newName = folder.name;\r\n-        return AlertDialog(\r\n-          title: Text('Rename Folder'),\r\n-          content: TextField(\r\n-            onChanged: (value) => newName = value,\r\n-            decoration: InputDecoration(hintText: 'New Folder Name'),\r\n-          ),\r\n-          actions: [\r\n-            TextButton(\r\n-              child: Text('Cancel'),\r\n-              onPressed: () => Navigator.of(context).pop(),\r\n-            ),\r\n-            TextButton(\r\n-              child: Text('Rename'),\r\n-              onPressed: () {\r\n-                if (newName.isNotEmpty) {\r\n-                  folder.rename(newName);\r\n-                  Navigator.of(context).pop();\r\n-                }\r\n-              },\r\n-            ),\r\n-          ],\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  void _deleteFolder(BuildContext context, Folder folder) {\r\n-    if (folder.parent != null) {\r\n-      folder.parent!.removeSubfolder(folder);\r\n-    } else {\r\n-      // Handle root folder deletion (if allowed)\r\n-    }\r\n-  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728145350700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,20 @@\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n import '../models/folder.dart';\r\n+import '../models/book.dart';\r\n \r\n class FolderTree extends StatelessWidget {\r\n   final Folder rootFolder;\r\n+  final Function(Folder) onFolderSelected;\r\n+  final Function(Book, Folder) onBookDropped;\r\n \r\n-  const FolderTree({Key? key, required this.rootFolder}) : super(key: key);\r\n+  const FolderTree({\r\n+    Key? key,\r\n+    required this.rootFolder,\r\n+    required this.onFolderSelected,\r\n+    required this.onBookDropped,\r\n+  }) : super(key: key);\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n     return ChangeNotifierProvider.value(\r\n@@ -17,105 +25,26 @@\n \r\n   Widget _buildFolderTree(Folder folder) {\r\n     return Consumer<Folder>(\r\n       builder: (context, folder, child) {\r\n-        return ExpansionTile(\r\n-          title: Text(folder.name),\r\n-          children: [\r\n-            ...folder.subfolders.map((subfolder) => _buildFolderTree(subfolder)),\r\n-            ...folder.books.map((book) => ListTile(title: Text(book.title))),\r\n-          ],\r\n-          trailing: Row(\r\n-            mainAxisSize: MainAxisSize.min,\r\n-            children: [\r\n-              IconButton(\r\n-                icon: Icon(Icons.add),\r\n-                onPressed: () => _showAddDialog(context, folder),\r\n-              ),\r\n-              IconButton(\r\n-                icon: Icon(Icons.edit),\r\n-                onPressed: () => _showRenameDialog(context, folder),\r\n-              ),\r\n-              IconButton(\r\n-                icon: Icon(Icons.delete),\r\n-                onPressed: () => _deleteFolder(context, folder),\r\n-              ),\r\n-            ],\r\n-          ),\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  void _showAddDialog(BuildContext context, Folder parentFolder) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (context) {\r\n-        String newFolderName = '';\r\n-        return AlertDialog(\r\n-          title: Text('Add New Folder'),\r\n-          content: TextField(\r\n-            onChanged: (value) => newFolderName = value,\r\n-            decoration: InputDecoration(hintText: 'Folder Name'),\r\n-          ),\r\n-          actions: [\r\n-            TextButton(\r\n-              child: Text('Cancel'),\r\n-              onPressed: () => Navigator.of(context).pop(),\r\n-            ),\r\n-            TextButton(\r\n-              child: Text('Add'),\r\n-              onPressed: () {\r\n-                if (newFolderName.isNotEmpty) {\r\n-                  parentFolder.addSubfolder(Folder(\r\n-                    id: DateTime.now().toString(),\r\n-                    name: newFolderName,\r\n-                  ));\r\n-                  Navigator.of(context).pop();\r\n+        return DragTarget<Book>(\r\n+          builder: (context, candidateData, rejectedData) {\r\n+            return ExpansionTile(\r\n+              title: Text(folder.name),\r\n+              children: [\r\n+                ...folder.subfolders.map((subfolder) => _buildFolderTree(subfolder)),\r\n+              ],\r\n+              onExpansionChanged: (expanded) {\r\n+                if (expanded) {\r\n+                  onFolderSelected(folder);\r\n                 }\r\n               },\r\n-            ),\r\n-          ],\r\n+            );\r\n+          },\r\n+          onAccept: (book) {\r\n+            onBookDropped(book, folder);\r\n+          },\r\n         );\r\n       },\r\n     );\r\n   }\r\n-\r\n-  void _showRenameDialog(BuildContext context, Folder folder) {\r\n-    showDialog(\r\n-      context: context,\r\n-      builder: (context) {\r\n-        String newName = folder.name;\r\n-        return AlertDialog(\r\n-          title: Text('Rename Folder'),\r\n-          content: TextField(\r\n-            onChanged: (value) => newName = value,\r\n-            decoration: InputDecoration(hintText: 'New Folder Name'),\r\n-          ),\r\n-          actions: [\r\n-            TextButton(\r\n-              child: Text('Cancel'),\r\n-              onPressed: () => Navigator.of(context).pop(),\r\n-            ),\r\n-            TextButton(\r\n-              child: Text('Rename'),\r\n-              onPressed: () {\r\n-                if (newName.isNotEmpty) {\r\n-                  folder.rename(newName);\r\n-                  Navigator.of(context).pop();\r\n-                }\r\n-              },\r\n-            ),\r\n-          ],\r\n-        );\r\n-      },\r\n-    );\r\n-  }\r\n-\r\n-  void _deleteFolder(BuildContext context, Folder folder) {\r\n-    if (folder.parent != null) {\r\n-      folder.parent!.removeSubfolder(folder);\r\n-    } else {\r\n-      // Handle root folder deletion (if allowed)\r\n-    }\r\n-  }\r\n }\n\\ No newline at end of file\n"
                }
            ],
            "date": 1728144424124,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\nimport '../models/folder.dart';\r\n\r\nclass FolderTree extends StatelessWidget {\r\n  final Folder rootFolder;\r\n\r\n  const FolderTree({Key? key, required this.rootFolder}) : super(key: key);\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return ChangeNotifierProvider.value(\r\n      value: rootFolder,\r\n      child: _buildFolderTree(rootFolder),\r\n    );\r\n  }\r\n\r\n  Widget _buildFolderTree(Folder folder) {\r\n    return Consumer<Folder>(\r\n      builder: (context, folder, child) {\r\n        return ExpansionTile(\r\n          title: Text(folder.name),\r\n          children: [\r\n            ...folder.subfolders.map((subfolder) => _buildFolderTree(subfolder)),\r\n            ...folder.books.map((book) => ListTile(title: Text(book.title))),\r\n          ],\r\n          trailing: Row(\r\n            mainAxisSize: MainAxisSize.min,\r\n            children: [\r\n              IconButton(\r\n                icon: Icon(Icons.add),\r\n                onPressed: () => _showAddDialog(context, folder),\r\n              ),\r\n              IconButton(\r\n                icon: Icon(Icons.edit),\r\n                onPressed: () => _showRenameDialog(context, folder),\r\n              ),\r\n              IconButton(\r\n                icon: Icon(Icons.delete),\r\n                onPressed: () => _deleteFolder(context, folder),\r\n              ),\r\n            ],\r\n          ),\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  void _showAddDialog(BuildContext context, Folder parentFolder) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) {\r\n        String newFolderName = '';\r\n        return AlertDialog(\r\n          title: Text('Add New Folder'),\r\n          content: TextField(\r\n            onChanged: (value) => newFolderName = value,\r\n            decoration: InputDecoration(hintText: 'Folder Name'),\r\n          ),\r\n          actions: [\r\n            TextButton(\r\n              child: Text('Cancel'),\r\n              onPressed: () => Navigator.of(context).pop(),\r\n            ),\r\n            TextButton(\r\n              child: Text('Add'),\r\n              onPressed: () {\r\n                if (newFolderName.isNotEmpty) {\r\n                  parentFolder.addSubfolder(Folder(\r\n                    id: DateTime.now().toString(),\r\n                    name: newFolderName,\r\n                  ));\r\n                  Navigator.of(context).pop();\r\n                }\r\n              },\r\n            ),\r\n          ],\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  void _showRenameDialog(BuildContext context, Folder folder) {\r\n    showDialog(\r\n      context: context,\r\n      builder: (context) {\r\n        String newName = folder.name;\r\n        return AlertDialog(\r\n          title: Text('Rename Folder'),\r\n          content: TextField(\r\n            onChanged: (value) => newName = value,\r\n            decoration: InputDecoration(hintText: 'New Folder Name'),\r\n          ),\r\n          actions: [\r\n            TextButton(\r\n              child: Text('Cancel'),\r\n              onPressed: () => Navigator.of(context).pop(),\r\n            ),\r\n            TextButton(\r\n              child: Text('Rename'),\r\n              onPressed: () {\r\n                if (newName.isNotEmpty) {\r\n                  folder.rename(newName);\r\n                  Navigator.of(context).pop();\r\n                }\r\n              },\r\n            ),\r\n          ],\r\n        );\r\n      },\r\n    );\r\n  }\r\n\r\n  void _deleteFolder(BuildContext context, Folder folder) {\r\n    if (folder.parent != null) {\r\n      folder.parent!.removeSubfolder(folder);\r\n    } else {\r\n      // Handle root folder deletion (if allowed)\r\n    }\r\n  }\r\n}"
        }
    ]
}