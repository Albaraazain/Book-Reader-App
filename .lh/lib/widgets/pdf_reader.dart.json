{
    "sourceFile": "lib/widgets/pdf_reader.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1728145381002,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1728145381002,
            "name": "Commit-0",
            "content": "import 'dart:async';\r\nimport 'package:flutter/material.dart';\r\nimport 'package:flutter_pdfview/flutter_pdfview.dart';\r\nimport 'package:shared_preferences/shared_preferences.dart';\r\nimport '../models/book.dart';\r\n\r\nclass PdfReaderWidget extends StatefulWidget {\r\n  final Book book;\r\n\r\n  const PdfReaderWidget({Key? key, required this.book}) : super(key: key);\r\n\r\n  @override\r\n  _PdfReaderWidgetState createState() => _PdfReaderWidgetState();\r\n}\r\n\r\nclass _PdfReaderWidgetState extends State<PdfReaderWidget> {\r\n  late PDFViewController _controller;\r\n  int _currentPage = 0;\r\n  int _totalPages = 0;\r\n  bool _nightMode = false;\r\n\r\n  @override\r\n  void initState() {\r\n    super.initState();\r\n    _loadLastPage();\r\n    _loadNightMode();\r\n  }\r\n\r\n  Future<void> _loadLastPage() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    setState(() {\r\n      _currentPage = prefs.getInt('lastPage_${widget.book.id}') ?? 0;\r\n    });\r\n  }\r\n\r\n  Future<void> _saveLastPage(int page) async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    await prefs.setInt('lastPage_${widget.book.id}', page);\r\n    widget.book.updateLastPageRead(page);\r\n  }\r\n\r\n  Future<void> _loadNightMode() async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    setState(() {\r\n      _nightMode = prefs.getBool('nightMode') ?? false;\r\n    });\r\n  }\r\n\r\n  Future<void> _saveNightMode(bool nightMode) async {\r\n    final prefs = await SharedPreferences.getInstance();\r\n    await prefs.setBool('nightMode', nightMode);\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: Text(widget.book.title),\r\n        actions: [\r\n          IconButton(\r\n            icon: Icon(_nightMode ? Icons.brightness_3 : Icons.brightness_7),\r\n            onPressed: () {\r\n              setState(() {\r\n                _nightMode = !_nightMode;\r\n                _saveNightMode(_nightMode);\r\n              });\r\n            },\r\n          ),\r\n        ],\r\n      ),\r\n      body: Stack(\r\n        children: [\r\n          PDFView(\r\n            filePath: widget.book.filePath,\r\n            enableSwipe: true,\r\n            swipeHorizontal: true,\r\n            autoSpacing: false,\r\n            pageFling: false,\r\n            pageSnap: true,\r\n            defaultPage: _currentPage,\r\n            onViewCreated: (PDFViewController pdfViewController) {\r\n              _controller = pdfViewController;\r\n            },\r\n            onRender: (_pages) {\r\n              setState(() {\r\n                _totalPages = _pages!;\r\n              });\r\n            },\r\n            onPageChanged: (int? page, int? total) {\r\n              if (page != null) {\r\n                setState(() {\r\n                  _currentPage = page;\r\n                });\r\n                _saveLastPage(page);\r\n              }\r\n            },\r\n            onError: (error) {\r\n              print(error.toString());\r\n            },\r\n            onPageError: (page, error) {\r\n              print('$page: ${error.toString()}');\r\n            },\r\n          ),\r\n          if (_nightMode)\r\n            Positioned.fill(\r\n              child: Container(\r\n                color: Colors.black.withOpacity(0.5),\r\n              ),\r\n            ),\r\n        ],\r\n      ),\r\n      bottomNavigationBar: BottomAppBar(\r\n        child: Padding(\r\n          padding: const EdgeInsets.all(8.0),\r\n          child: Row(\r\n            mainAxisAlignment: MainAxisAlignment.spaceBetween,\r\n            children: [\r\n              Text('Page ${_currentPage + 1} of $_totalPages'),\r\n              Row(\r\n                children: [\r\n                  IconButton(\r\n                    icon: Icon(Icons.navigate_before),\r\n                    onPressed: () {\r\n                      _controller.setPage(_currentPage - 1);\r\n                    },\r\n                  ),\r\n                  IconButton(\r\n                    icon: Icon(Icons.navigate_next),\r\n                    onPressed: () {\r\n                      _controller.setPage(_currentPage + 1);\r\n                    },\r\n                  ),\r\n                ],\r\n              ),\r\n            ],\r\n          ),\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}"
        }
    ]
}