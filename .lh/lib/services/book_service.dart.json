{
    "sourceFile": "lib/services/book_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1728144887568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1728145462129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,5 +68,11 @@\n \r\n   Future<List<Book>> loadBooksInFolder(Folder folder) async {\r\n     return await _dbHelper.getBooksInFolder(folder.id);\r\n   }\r\n+\r\n+  Future<void> moveBook(Book book, Folder sourceFolder, Folder targetFolder) async {\r\n+    sourceFolder.removeBook(book);\r\n+    targetFolder.addBook(book);\r\n+    await _dbHelper.updateBook(book, targetFolder.id);\r\n+  }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1728145736368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,30 +7,47 @@\n \r\n class BookService {\r\n   final DatabaseHelper _dbHelper = DatabaseHelper.instance;\r\n \r\n-  Future<Book> importBook(File pdfFile, Folder targetFolder) async {\r\n-    final String fileName = path.basename(pdfFile.path);\r\n-    final String bookTitle = path.basenameWithoutExtension(fileName);\r\n-    \r\n-    final Directory appDocDir = await getApplicationDocumentsDirectory();\r\n-    final String appDocPath = appDocDir.path;\r\n-    final String newFilePath = path.join(appDocPath, 'books', fileName);\r\n-    await pdfFile.copy(newFilePath);\r\n-\r\n-    final Book newBook = Book(\r\n-      id: DateTime.now().toString(),\r\n-      title: bookTitle,\r\n-      author: 'Unknown',\r\n-      filePath: newFilePath,\r\n+  Future<Book?> importBook(Folder targetFolder) async {\r\n+    FilePickerResult? result = await FilePicker.platform.pickFiles(\r\n+      type: FileType.custom,\r\n+      allowedExtensions: ['pdf'],\r\n     );\r\n \r\n-    await _dbHelper.insertBook(newBook, targetFolder.id);\r\n-    targetFolder.addBook(newBook);\r\n+    if (result != null) {\r\n+      File file = File(result.files.single.path!);\r\n+      final String fileName = path.basename(file.path);\r\n+      final String bookTitle = path.basenameWithoutExtension(fileName);\r\n+      \r\n+      final Directory appDocDir = await getApplicationDocumentsDirectory();\r\n+      final String appDocPath = appDocDir.path;\r\n+      final String newFilePath = path.join(appDocPath, 'books', fileName);\r\n+      \r\n+      // Create the books directory if it doesn't exist\r\n+      await Directory(path.dirname(newFilePath)).create(recursive: true);\r\n+      \r\n+      // Copy the file to the app's documents directory\r\n+      await file.copy(newFilePath);\r\n \r\n-    return newBook;\r\n+      final Book newBook = Book(\r\n+        id: DateTime.now().toString(),\r\n+        title: bookTitle,\r\n+        author: 'Unknown', // You might want to extract this from PDF metadata\r\n+        filePath: newFilePath,\r\n+        dateAdded: DateTime.now(),\r\n+      );\r\n+\r\n+      await _dbHelper.insertBook(newBook, targetFolder.id);\r\n+      targetFolder.addBook(newBook);\r\n+\r\n+      return newBook;\r\n+    }\r\n+\r\n+    return null; // User canceled the file picker\r\n   }\r\n \r\n+\r\n   Future<void> updateBookMetadata(Book book, Folder folder, {String? title, String? author, String? coverImagePath, List<String>? tags}) async {\r\n     book.updateMetadata(\r\n       title: title,\r\n       author: author,\r\n"
                },
                {
                    "date": 1728145768505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import 'dart:io';\r\n import 'package:path/path.dart' as path;\r\n+import 'package:file_picker/file_picker.dart';\r\n import 'package:path_provider/path_provider.dart';\r\n import '../models/book.dart';\r\n import '../models/folder.dart';\r\n import 'database_helper.dart';\r\n"
                },
                {
                    "date": 1728166389304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,31 @@\n \r\n class BookService {\r\n   final DatabaseHelper _dbHelper = DatabaseHelper.instance;\r\n \r\n+  Future<void> updateBookMetadata(Book book,\r\n+      {String? title,\r\n+      String? author,\r\n+      String? coverImagePath,\r\n+      List<String>? tags,\r\n+      List<BookmarkEntry>? bookmarks}) async {\r\n+    book.updateMetadata(\r\n+      title: title,\r\n+      author: author,\r\n+      coverImagePath: coverImagePath,\r\n+      tags: tags,\r\n+    );\r\n+    if (bookmarks != null) {\r\n+      book.bookmarks = bookmarks;\r\n+    }\r\n+    await _dbHelper.updateBook(book);\r\n+  }\r\n+\r\n+  Future<void> updateLastPageRead(Book book, int lastPageRead) async {\r\n+    book.updateLastPageRead(lastPageRead);\r\n+    await _dbHelper.updateLastPageRead(book);\r\n+  }\r\n+\r\n   Future<Book?> importBook(Folder targetFolder) async {\r\n     FilePickerResult? result = await FilePicker.platform.pickFiles(\r\n       type: FileType.custom,\r\n       allowedExtensions: ['pdf'],\r\n@@ -18,16 +41,16 @@\n     if (result != null) {\r\n       File file = File(result.files.single.path!);\r\n       final String fileName = path.basename(file.path);\r\n       final String bookTitle = path.basenameWithoutExtension(fileName);\r\n-      \r\n+\r\n       final Directory appDocDir = await getApplicationDocumentsDirectory();\r\n       final String appDocPath = appDocDir.path;\r\n       final String newFilePath = path.join(appDocPath, 'books', fileName);\r\n-      \r\n+\r\n       // Create the books directory if it doesn't exist\r\n       await Directory(path.dirname(newFilePath)).create(recursive: true);\r\n-      \r\n+\r\n       // Copy the file to the app's documents directory\r\n       await file.copy(newFilePath);\r\n \r\n       final Book newBook = Book(\r\n@@ -46,26 +69,16 @@\n \r\n     return null; // User canceled the file picker\r\n   }\r\n \r\n-\r\n-  Future<void> updateBookMetadata(Book book, Folder folder, {String? title, String? author, String? coverImagePath, List<String>? tags}) async {\r\n-    book.updateMetadata(\r\n-      title: title,\r\n-      author: author,\r\n-      coverImagePath: coverImagePath,\r\n-      tags: tags,\r\n-    );\r\n-    await _dbHelper.updateBook(book, folder.id);\r\n-  }\r\n-\r\n   List<Book> searchBooks(List<Book> books, String query) {\r\n     query = query.toLowerCase();\r\n-    return books.where((book) =>\r\n-      book.title.toLowerCase().contains(query) ||\r\n-      book.author.toLowerCase().contains(query) ||\r\n-      book.tags.any((tag) => tag.toLowerCase().contains(query))\r\n-    ).toList();\r\n+    return books\r\n+        .where((book) =>\r\n+            book.title.toLowerCase().contains(query) ||\r\n+            book.author.toLowerCase().contains(query) ||\r\n+            book.tags.any((tag) => tag.toLowerCase().contains(query)))\r\n+        .toList();\r\n   }\r\n \r\n   Future<void> deleteBook(Book book, Folder folder) async {\r\n     folder.removeBook(book);\r\n@@ -87,10 +100,11 @@\n   Future<List<Book>> loadBooksInFolder(Folder folder) async {\r\n     return await _dbHelper.getBooksInFolder(folder.id);\r\n   }\r\n \r\n-  Future<void> moveBook(Book book, Folder sourceFolder, Folder targetFolder) async {\r\n+  Future<void> moveBook(\r\n+      Book book, Folder sourceFolder, Folder targetFolder) async {\r\n     sourceFolder.removeBook(book);\r\n     targetFolder.addBook(book);\r\n-    await _dbHelper.updateBook(book, targetFolder.id);\r\n\\ No newline at end of file\n+    await _dbHelper.updateBookFolder(book, targetFolder.id);\r\n   }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1728166906420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,8 +96,13 @@\n       }\r\n     }\r\n   }\r\n \r\n+  // getfolders\r\n+  Future<List<Folder>> getFolders() async {\r\n+    return await _dbHelper.getFolders();\r\n+  }\r\n+\r\n   Future<List<Book>> loadBooksInFolder(Folder folder) async {\r\n     return await _dbHelper.getBooksInFolder(folder.id);\r\n   }\r\n \r\n"
                }
            ],
            "date": 1728144887567,
            "name": "Commit-0",
            "content": "import 'dart:io';\r\nimport 'package:path/path.dart' as path;\r\nimport 'package:path_provider/path_provider.dart';\r\nimport '../models/book.dart';\r\nimport '../models/folder.dart';\r\nimport 'database_helper.dart';\r\n\r\nclass BookService {\r\n  final DatabaseHelper _dbHelper = DatabaseHelper.instance;\r\n\r\n  Future<Book> importBook(File pdfFile, Folder targetFolder) async {\r\n    final String fileName = path.basename(pdfFile.path);\r\n    final String bookTitle = path.basenameWithoutExtension(fileName);\r\n    \r\n    final Directory appDocDir = await getApplicationDocumentsDirectory();\r\n    final String appDocPath = appDocDir.path;\r\n    final String newFilePath = path.join(appDocPath, 'books', fileName);\r\n    await pdfFile.copy(newFilePath);\r\n\r\n    final Book newBook = Book(\r\n      id: DateTime.now().toString(),\r\n      title: bookTitle,\r\n      author: 'Unknown',\r\n      filePath: newFilePath,\r\n    );\r\n\r\n    await _dbHelper.insertBook(newBook, targetFolder.id);\r\n    targetFolder.addBook(newBook);\r\n\r\n    return newBook;\r\n  }\r\n\r\n  Future<void> updateBookMetadata(Book book, Folder folder, {String? title, String? author, String? coverImagePath, List<String>? tags}) async {\r\n    book.updateMetadata(\r\n      title: title,\r\n      author: author,\r\n      coverImagePath: coverImagePath,\r\n      tags: tags,\r\n    );\r\n    await _dbHelper.updateBook(book, folder.id);\r\n  }\r\n\r\n  List<Book> searchBooks(List<Book> books, String query) {\r\n    query = query.toLowerCase();\r\n    return books.where((book) =>\r\n      book.title.toLowerCase().contains(query) ||\r\n      book.author.toLowerCase().contains(query) ||\r\n      book.tags.any((tag) => tag.toLowerCase().contains(query))\r\n    ).toList();\r\n  }\r\n\r\n  Future<void> deleteBook(Book book, Folder folder) async {\r\n    folder.removeBook(book);\r\n    await _dbHelper.deleteBook(book.id);\r\n\r\n    final File bookFile = File(book.filePath);\r\n    if (await bookFile.exists()) {\r\n      await bookFile.delete();\r\n    }\r\n\r\n    if (book.coverImagePath != null) {\r\n      final File coverImageFile = File(book.coverImagePath!);\r\n      if (await coverImageFile.exists()) {\r\n        await coverImageFile.delete();\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<List<Book>> loadBooksInFolder(Folder folder) async {\r\n    return await _dbHelper.getBooksInFolder(folder.id);\r\n  }\r\n}"
        }
    ]
}